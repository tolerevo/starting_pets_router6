{"ast":null,"code":"var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n    exports: {}\n  }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\n\n// node_modules/set-cookie-parser/lib/set-cookie.js\nvar require_set_cookie = __commonJS({\n  \"node_modules/set-cookie-parser/lib/set-cookie.js\"(exports, module) {\n    \"use strict\";\n\n    var defaultParseOptions = {\n      decodeValues: true,\n      map: false,\n      silent: false\n    };\n    function isNonEmptyString(str) {\n      return typeof str === \"string\" && !!str.trim();\n    }\n    function parseString(setCookieValue, options) {\n      var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\n      var nameValuePairStr = parts.shift();\n      var parsed = parseNameValuePair(nameValuePairStr);\n      var name = parsed.name;\n      var value = parsed.value;\n      options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n      try {\n        value = options.decodeValues ? decodeURIComponent(value) : value;\n      } catch (e) {\n        console.error(\"set-cookie-parser encountered an error while decoding a cookie with value '\" + value + \"'. Set options.decodeValues to false to disable this feature.\", e);\n      }\n      var cookie = {\n        name,\n        value\n      };\n      parts.forEach(function (part) {\n        var sides = part.split(\"=\");\n        var key = sides.shift().trimLeft().toLowerCase();\n        var value2 = sides.join(\"=\");\n        if (key === \"expires\") {\n          cookie.expires = new Date(value2);\n        } else if (key === \"max-age\") {\n          cookie.maxAge = parseInt(value2, 10);\n        } else if (key === \"secure\") {\n          cookie.secure = true;\n        } else if (key === \"httponly\") {\n          cookie.httpOnly = true;\n        } else if (key === \"samesite\") {\n          cookie.sameSite = value2;\n        } else {\n          cookie[key] = value2;\n        }\n      });\n      return cookie;\n    }\n    function parseNameValuePair(nameValuePairStr) {\n      var name = \"\";\n      var value = \"\";\n      var nameValueArr = nameValuePairStr.split(\"=\");\n      if (nameValueArr.length > 1) {\n        name = nameValueArr.shift();\n        value = nameValueArr.join(\"=\");\n      } else {\n        value = nameValuePairStr;\n      }\n      return {\n        name,\n        value\n      };\n    }\n    function parse(input, options) {\n      options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n      if (!input) {\n        if (!options.map) {\n          return [];\n        } else {\n          return {};\n        }\n      }\n      if (input.headers) {\n        if (typeof input.headers.getSetCookie === \"function\") {\n          input = input.headers.getSetCookie();\n        } else if (input.headers[\"set-cookie\"]) {\n          input = input.headers[\"set-cookie\"];\n        } else {\n          var sch = input.headers[Object.keys(input.headers).find(function (key) {\n            return key.toLowerCase() === \"set-cookie\";\n          })];\n          if (!sch && input.headers.cookie && !options.silent) {\n            console.warn(\"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\");\n          }\n          input = sch;\n        }\n      }\n      if (!Array.isArray(input)) {\n        input = [input];\n      }\n      options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n      if (!options.map) {\n        return input.filter(isNonEmptyString).map(function (str) {\n          return parseString(str, options);\n        });\n      } else {\n        var cookies = {};\n        return input.filter(isNonEmptyString).reduce(function (cookies2, str) {\n          var cookie = parseString(str, options);\n          cookies2[cookie.name] = cookie;\n          return cookies2;\n        }, cookies);\n      }\n    }\n    function splitCookiesString2(cookiesString) {\n      if (Array.isArray(cookiesString)) {\n        return cookiesString;\n      }\n      if (typeof cookiesString !== \"string\") {\n        return [];\n      }\n      var cookiesStrings = [];\n      var pos = 0;\n      var start;\n      var ch;\n      var lastComma;\n      var nextStart;\n      var cookiesSeparatorFound;\n      function skipWhitespace() {\n        while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n          pos += 1;\n        }\n        return pos < cookiesString.length;\n      }\n      function notSpecialChar() {\n        ch = cookiesString.charAt(pos);\n        return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n      }\n      while (pos < cookiesString.length) {\n        start = pos;\n        cookiesSeparatorFound = false;\n        while (skipWhitespace()) {\n          ch = cookiesString.charAt(pos);\n          if (ch === \",\") {\n            lastComma = pos;\n            pos += 1;\n            skipWhitespace();\n            nextStart = pos;\n            while (pos < cookiesString.length && notSpecialChar()) {\n              pos += 1;\n            }\n            if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n              cookiesSeparatorFound = true;\n              pos = nextStart;\n              cookiesStrings.push(cookiesString.substring(start, lastComma));\n              start = pos;\n            } else {\n              pos = lastComma + 1;\n            }\n          } else {\n            pos += 1;\n          }\n        }\n        if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n          cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n        }\n      }\n      return cookiesStrings;\n    }\n    module.exports = parse;\n    module.exports.parse = parse;\n    module.exports.parseString = parseString;\n    module.exports.splitCookiesString = splitCookiesString2;\n  }\n});\n\n// src/Headers.ts\nvar import_set_cookie_parser = __toESM(require_set_cookie());\n\n// src/utils/normalizeHeaderName.ts\nvar HEADERS_INVALID_CHARACTERS = /[^a-z0-9\\-#$%&'*+.^_`|~]/i;\nfunction normalizeHeaderName(name) {\n  if (HEADERS_INVALID_CHARACTERS.test(name) || name.trim() === \"\") {\n    throw new TypeError(\"Invalid character in header field name\");\n  }\n  return name.trim().toLowerCase();\n}\n\n// src/utils/normalizeHeaderValue.ts\nvar charCodesToRemove = [String.fromCharCode(10), String.fromCharCode(13), String.fromCharCode(9), String.fromCharCode(32)];\nvar HEADER_VALUE_REMOVE_REGEXP = new RegExp(`(^[${charCodesToRemove.join(\"\")}]|$[${charCodesToRemove.join(\"\")}])`, \"g\");\nfunction normalizeHeaderValue(value) {\n  const nextValue = value.replace(HEADER_VALUE_REMOVE_REGEXP, \"\");\n  return nextValue;\n}\n\n// src/utils/isValidHeaderName.ts\nfunction isValidHeaderName(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n  if (value.length === 0) {\n    return false;\n  }\n  for (let i = 0; i < value.length; i++) {\n    const character = value.charCodeAt(i);\n    if (character > 127 || !isToken(character)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isToken(value) {\n  return ![127, 32, \"(\", \")\", \"<\", \">\", \"@\", \",\", \";\", \":\", \"\\\\\", '\"', \"/\", \"[\", \"]\", \"?\", \"=\", \"{\", \"}\"].includes(value);\n}\n\n// src/utils/isValidHeaderValue.ts\nfunction isValidHeaderValue(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n  if (value.trim() !== value) {\n    return false;\n  }\n  for (let i = 0; i < value.length; i++) {\n    const character = value.charCodeAt(i);\n    if (\n    // NUL.\n    character === 0 ||\n    // HTTP newline bytes.\n    character === 10 || character === 13) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// src/Headers.ts\nvar NORMALIZED_HEADERS = Symbol(\"normalizedHeaders\");\nvar RAW_HEADER_NAMES = Symbol(\"rawHeaderNames\");\nvar HEADER_VALUE_DELIMITER = \", \";\nvar _a, _b;\nvar Headers = class _Headers {\n  constructor(init) {\n    // Normalized header {\"name\":\"a, b\"} storage.\n    this[_a] = {};\n    // Keeps the mapping between the raw header name\n    // and the normalized header name to ease the lookup.\n    this[_b] = /* @__PURE__ */new Map();\n    if ([\"Headers\", \"HeadersPolyfill\"].includes(init?.constructor.name) || init instanceof _Headers || typeof globalThis.Headers !== \"undefined\" && init instanceof globalThis.Headers) {\n      const initialHeaders = init;\n      initialHeaders.forEach((value, name) => {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(init)) {\n      init.forEach(_ref => {\n        let [name, value] = _ref;\n        this.append(name, Array.isArray(value) ? value.join(HEADER_VALUE_DELIMITER) : value);\n      });\n    } else if (init) {\n      Object.getOwnPropertyNames(init).forEach(name => {\n        const value = init[name];\n        this.append(name, Array.isArray(value) ? value.join(HEADER_VALUE_DELIMITER) : value);\n      });\n    }\n  }\n  [(_a = NORMALIZED_HEADERS, _b = RAW_HEADER_NAMES, Symbol.iterator)]() {\n    return this.entries();\n  }\n  *keys() {\n    for (const [name] of this.entries()) {\n      yield name;\n    }\n  }\n  *values() {\n    for (const [, value] of this.entries()) {\n      yield value;\n    }\n  }\n  *entries() {\n    let sortedKeys = Object.keys(this[NORMALIZED_HEADERS]).sort((a, b) => a.localeCompare(b));\n    for (const name of sortedKeys) {\n      if (name === \"set-cookie\") {\n        for (const value of this.getSetCookie()) {\n          yield [name, value];\n        }\n      } else {\n        yield [name, this.get(name)];\n      }\n    }\n  }\n  /**\n   * Returns a boolean stating whether a `Headers` object contains a certain header.\n   */\n  has(name) {\n    if (!isValidHeaderName(name)) {\n      throw new TypeError(`Invalid header name \"${name}\"`);\n    }\n    return this[NORMALIZED_HEADERS].hasOwnProperty(normalizeHeaderName(name));\n  }\n  /**\n   * Returns a `ByteString` sequence of all the values of a header with a given name.\n   */\n  get(name) {\n    if (!isValidHeaderName(name)) {\n      throw TypeError(`Invalid header name \"${name}\"`);\n    }\n    return this[NORMALIZED_HEADERS][normalizeHeaderName(name)] ?? null;\n  }\n  /**\n   * Sets a new value for an existing header inside a `Headers` object, or adds the header if it does not already exist.\n   */\n  set(name, value) {\n    if (!isValidHeaderName(name) || !isValidHeaderValue(value)) {\n      return;\n    }\n    const normalizedName = normalizeHeaderName(name);\n    const normalizedValue = normalizeHeaderValue(value);\n    this[NORMALIZED_HEADERS][normalizedName] = normalizeHeaderValue(normalizedValue);\n    this[RAW_HEADER_NAMES].set(normalizedName, name);\n  }\n  /**\n   * Appends a new value onto an existing header inside a `Headers` object, or adds the header if it does not already exist.\n   */\n  append(name, value) {\n    if (!isValidHeaderName(name) || !isValidHeaderValue(value)) {\n      return;\n    }\n    const normalizedName = normalizeHeaderName(name);\n    const normalizedValue = normalizeHeaderValue(value);\n    let resolvedValue = this.has(normalizedName) ? `${this.get(normalizedName)}, ${normalizedValue}` : normalizedValue;\n    this.set(name, resolvedValue);\n  }\n  /**\n   * Deletes a header from the `Headers` object.\n   */\n  delete(name) {\n    if (!isValidHeaderName(name)) {\n      return;\n    }\n    if (!this.has(name)) {\n      return;\n    }\n    const normalizedName = normalizeHeaderName(name);\n    delete this[NORMALIZED_HEADERS][normalizedName];\n    this[RAW_HEADER_NAMES].delete(normalizedName);\n  }\n  /**\n   * Traverses the `Headers` object,\n   * calling the given callback for each header.\n   */\n  forEach(callback, thisArg) {\n    for (const [name, value] of this.entries()) {\n      callback.call(thisArg, value, name, this);\n    }\n  }\n  /**\n   * Returns an array containing the values\n   * of all Set-Cookie headers associated\n   * with a response\n   */\n  getSetCookie() {\n    const setCookieHeader = this.get(\"set-cookie\");\n    if (setCookieHeader === null) {\n      return [];\n    }\n    if (setCookieHeader === \"\") {\n      return [\"\"];\n    }\n    return (0, import_set_cookie_parser.splitCookiesString)(setCookieHeader);\n  }\n};\n\n// src/getRawHeaders.ts\nfunction getRawHeaders(headers) {\n  const rawHeaders = {};\n  for (const [name, value] of headers.entries()) {\n    rawHeaders[headers[RAW_HEADER_NAMES].get(name)] = value;\n  }\n  return rawHeaders;\n}\n\n// src/transformers/headersToList.ts\nfunction headersToList(headers) {\n  const headersList = [];\n  headers.forEach((value, name) => {\n    const resolvedValue = value.includes(\",\") ? value.split(\",\").map(value2 => value2.trim()) : value;\n    headersList.push([name, resolvedValue]);\n  });\n  return headersList;\n}\n\n// src/transformers/headersToString.ts\nfunction headersToString(headers) {\n  const list = headersToList(headers);\n  const lines = list.map(_ref2 => {\n    let [name, value] = _ref2;\n    const values = [].concat(value);\n    return `${name}: ${values.join(\", \")}`;\n  });\n  return lines.join(\"\\r\\n\");\n}\n\n// src/transformers/headersToObject.ts\nvar singleValueHeaders = [\"user-agent\"];\nfunction headersToObject(headers) {\n  const headersObject = {};\n  headers.forEach((value, name) => {\n    const isMultiValue = !singleValueHeaders.includes(name.toLowerCase()) && value.includes(\",\");\n    headersObject[name] = isMultiValue ? value.split(\",\").map(s => s.trim()) : value;\n  });\n  return headersObject;\n}\n\n// src/transformers/stringToHeaders.ts\nfunction stringToHeaders(str) {\n  const lines = str.trim().split(/[\\r\\n]+/);\n  return lines.reduce((headers, line) => {\n    if (line.trim() === \"\") {\n      return headers;\n    }\n    const parts = line.split(\": \");\n    const name = parts.shift();\n    const value = parts.join(\": \");\n    headers.append(name, value);\n    return headers;\n  }, new Headers());\n}\n\n// src/transformers/listToHeaders.ts\nfunction listToHeaders(list) {\n  const headers = new Headers();\n  list.forEach(_ref3 => {\n    let [name, value] = _ref3;\n    const values = [].concat(value);\n    values.forEach(value2 => {\n      headers.append(name, value2);\n    });\n  });\n  return headers;\n}\n\n// src/transformers/reduceHeadersObject.ts\nfunction reduceHeadersObject(headers, reducer, initialState) {\n  return Object.keys(headers).reduce((nextHeaders, name) => {\n    return reducer(nextHeaders, name, headers[name]);\n  }, initialState);\n}\n\n// src/transformers/objectToHeaders.ts\nfunction objectToHeaders(headersObject) {\n  return reduceHeadersObject(headersObject, (headers, name, value) => {\n    const values = [].concat(value).filter(Boolean);\n    values.forEach(value2 => {\n      headers.append(name, value2);\n    });\n    return headers;\n  }, new Headers());\n}\n\n// src/transformers/flattenHeadersList.ts\nfunction flattenHeadersList(list) {\n  return list.map(_ref4 => {\n    let [name, values] = _ref4;\n    return [name, [].concat(values).join(\", \")];\n  });\n}\n\n// src/transformers/flattenHeadersObject.ts\nfunction flattenHeadersObject(headersObject) {\n  return reduceHeadersObject(headersObject, (headers, name, value) => {\n    headers[name] = [].concat(value).join(\", \");\n    return headers;\n  }, {});\n}\nexport { Headers, flattenHeadersList, flattenHeadersObject, getRawHeaders, headersToList, headersToObject, headersToString, listToHeaders, objectToHeaders, reduceHeadersObject, stringToHeaders };","map":{"version":3,"mappings":"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","names":["defaultParseOptions","decodeValues","map","silent","isNonEmptyString","str","trim","parseString","setCookieValue","options","parts","split","filter","nameValuePairStr","shift","parsed","parseNameValuePair","name","value","Object","assign","decodeURIComponent","e","console","error","cookie","forEach","part","sides","key","trimLeft","toLowerCase","join","expires","Date","maxAge","parseInt","secure","httpOnly","sameSite","nameValueArr","length","parse","input","headers","getSetCookie","sch","keys","find","warn","Array","isArray","cookies","reduce","splitCookiesString","cookiesString","cookiesStrings","pos","start","ch","lastComma","nextStart","cookiesSeparatorFound","skipWhitespace","test","charAt","notSpecialChar","push","substring","module","exports","__toESM","HEADERS_INVALID_CHARACTERS","normalizeHeaderName","TypeError","charCodesToRemove","String","fromCharCode","HEADER_VALUE_REMOVE_REGEXP","RegExp","normalizeHeaderValue","nextValue","replace","isValidHeaderName","i","character","charCodeAt","isToken","includes","isValidHeaderValue","NORMALIZED_HEADERS","Symbol","RAW_HEADER_NAMES","HEADER_VALUE_DELIMITER","Headers","_Headers","constructor","init","_a","_b","Map","globalThis","initialHeaders","append","_ref","getOwnPropertyNames","iterator","entries","values","sortedKeys","sort","a","b","localeCompare","get","has","hasOwnProperty","set","normalizedName","normalizedValue","resolvedValue","delete","callback","thisArg","call","setCookieHeader","import_set_cookie_parser","getRawHeaders","rawHeaders","headersToList","headersList","headersToString","list","lines","_ref2","concat","singleValueHeaders","headersToObject","headersObject","isMultiValue","s","stringToHeaders","line","listToHeaders","_ref3","reduceHeadersObject","reducer","initialState","nextHeaders","objectToHeaders","Boolean","flattenHeadersList","_ref4","flattenHeadersObject"],"sources":["/Users/ditole/Desktop/projects/pets-store/node_modules/headers-polyfill/node_modules/set-cookie-parser/lib/set-cookie.js","/Users/ditole/Desktop/projects/pets-store/node_modules/headers-polyfill/src/Headers.ts","/Users/ditole/Desktop/projects/pets-store/node_modules/headers-polyfill/src/utils/normalizeHeaderName.ts","/Users/ditole/Desktop/projects/pets-store/node_modules/headers-polyfill/src/utils/normalizeHeaderValue.ts","/Users/ditole/Desktop/projects/pets-store/node_modules/headers-polyfill/src/utils/isValidHeaderName.ts","/Users/ditole/Desktop/projects/pets-store/node_modules/headers-polyfill/src/utils/isValidHeaderValue.ts","/Users/ditole/Desktop/projects/pets-store/node_modules/headers-polyfill/src/getRawHeaders.ts","/Users/ditole/Desktop/projects/pets-store/node_modules/headers-polyfill/src/transformers/headersToList.ts","/Users/ditole/Desktop/projects/pets-store/node_modules/headers-polyfill/src/transformers/headersToString.ts","/Users/ditole/Desktop/projects/pets-store/node_modules/headers-polyfill/src/transformers/headersToObject.ts","/Users/ditole/Desktop/projects/pets-store/node_modules/headers-polyfill/src/transformers/stringToHeaders.ts","/Users/ditole/Desktop/projects/pets-store/node_modules/headers-polyfill/src/transformers/listToHeaders.ts","/Users/ditole/Desktop/projects/pets-store/node_modules/headers-polyfill/src/transformers/reduceHeadersObject.ts","/Users/ditole/Desktop/projects/pets-store/node_modules/headers-polyfill/src/transformers/objectToHeaders.ts","/Users/ditole/Desktop/projects/pets-store/node_modules/headers-polyfill/src/transformers/flattenHeadersList.ts","/Users/ditole/Desktop/projects/pets-store/node_modules/headers-polyfill/src/transformers/flattenHeadersObject.ts"],"sourcesContent":["\"use strict\";\n\nvar defaultParseOptions = {\n  decodeValues: true,\n  map: false,\n  silent: false,\n};\n\nfunction isNonEmptyString(str) {\n  return typeof str === \"string\" && !!str.trim();\n}\n\nfunction parseString(setCookieValue, options) {\n  var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\n\n  var nameValuePairStr = parts.shift();\n  var parsed = parseNameValuePair(nameValuePairStr);\n  var name = parsed.name;\n  var value = parsed.value;\n\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  try {\n    value = options.decodeValues ? decodeURIComponent(value) : value; // decode cookie value\n  } catch (e) {\n    console.error(\n      \"set-cookie-parser encountered an error while decoding a cookie with value '\" +\n        value +\n        \"'. Set options.decodeValues to false to disable this feature.\",\n      e\n    );\n  }\n\n  var cookie = {\n    name: name,\n    value: value,\n  };\n\n  parts.forEach(function (part) {\n    var sides = part.split(\"=\");\n    var key = sides.shift().trimLeft().toLowerCase();\n    var value = sides.join(\"=\");\n    if (key === \"expires\") {\n      cookie.expires = new Date(value);\n    } else if (key === \"max-age\") {\n      cookie.maxAge = parseInt(value, 10);\n    } else if (key === \"secure\") {\n      cookie.secure = true;\n    } else if (key === \"httponly\") {\n      cookie.httpOnly = true;\n    } else if (key === \"samesite\") {\n      cookie.sameSite = value;\n    } else {\n      cookie[key] = value;\n    }\n  });\n\n  return cookie;\n}\n\nfunction parseNameValuePair(nameValuePairStr) {\n  // Parses name-value-pair according to rfc6265bis draft\n\n  var name = \"\";\n  var value = \"\";\n  var nameValueArr = nameValuePairStr.split(\"=\");\n  if (nameValueArr.length > 1) {\n    name = nameValueArr.shift();\n    value = nameValueArr.join(\"=\"); // everything after the first =, joined by a \"=\" if there was more than one part\n  } else {\n    value = nameValuePairStr;\n  }\n\n  return { name: name, value: value };\n}\n\nfunction parse(input, options) {\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  if (!input) {\n    if (!options.map) {\n      return [];\n    } else {\n      return {};\n    }\n  }\n\n  if (input.headers) {\n    if (typeof input.headers.getSetCookie === \"function\") {\n      // for fetch responses - they combine headers of the same type in the headers array,\n      // but getSetCookie returns an uncombined array\n      input = input.headers.getSetCookie();\n    } else if (input.headers[\"set-cookie\"]) {\n      // fast-path for node.js (which automatically normalizes header names to lower-case\n      input = input.headers[\"set-cookie\"];\n    } else {\n      // slow-path for other environments - see #25\n      var sch =\n        input.headers[\n          Object.keys(input.headers).find(function (key) {\n            return key.toLowerCase() === \"set-cookie\";\n          })\n        ];\n      // warn if called on a request-like object with a cookie header rather than a set-cookie header - see #34, 36\n      if (!sch && input.headers.cookie && !options.silent) {\n        console.warn(\n          \"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\"\n        );\n      }\n      input = sch;\n    }\n  }\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  if (!options.map) {\n    return input.filter(isNonEmptyString).map(function (str) {\n      return parseString(str, options);\n    });\n  } else {\n    var cookies = {};\n    return input.filter(isNonEmptyString).reduce(function (cookies, str) {\n      var cookie = parseString(str, options);\n      cookies[cookie.name] = cookie;\n      return cookies;\n    }, cookies);\n  }\n}\n\n/*\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\n  that are within a single set-cookie field-value, such as in the Expires portion.\n\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\n  React Native's fetch does this for *every* header, including set-cookie.\n\n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\n*/\nfunction splitCookiesString(cookiesString) {\n  if (Array.isArray(cookiesString)) {\n    return cookiesString;\n  }\n  if (typeof cookiesString !== \"string\") {\n    return [];\n  }\n\n  var cookiesStrings = [];\n  var pos = 0;\n  var start;\n  var ch;\n  var lastComma;\n  var nextStart;\n  var cookiesSeparatorFound;\n\n  function skipWhitespace() {\n    while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n      pos += 1;\n    }\n    return pos < cookiesString.length;\n  }\n\n  function notSpecialChar() {\n    ch = cookiesString.charAt(pos);\n\n    return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n  }\n\n  while (pos < cookiesString.length) {\n    start = pos;\n    cookiesSeparatorFound = false;\n\n    while (skipWhitespace()) {\n      ch = cookiesString.charAt(pos);\n      if (ch === \",\") {\n        // ',' is a cookie separator if we have later first '=', not ';' or ','\n        lastComma = pos;\n        pos += 1;\n\n        skipWhitespace();\n        nextStart = pos;\n\n        while (pos < cookiesString.length && notSpecialChar()) {\n          pos += 1;\n        }\n\n        // currently special character\n        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n          // we found cookies separator\n          cookiesSeparatorFound = true;\n          // pos is inside the next cookie, so back up and return it.\n          pos = nextStart;\n          cookiesStrings.push(cookiesString.substring(start, lastComma));\n          start = pos;\n        } else {\n          // in param ',' or param separator ';',\n          // we continue from that comma\n          pos = lastComma + 1;\n        }\n      } else {\n        pos += 1;\n      }\n    }\n\n    if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n      cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n    }\n  }\n\n  return cookiesStrings;\n}\n\nmodule.exports = parse;\nmodule.exports.parse = parse;\nmodule.exports.parseString = parseString;\nmodule.exports.splitCookiesString = splitCookiesString;\n","import { splitCookiesString } from 'set-cookie-parser'\nimport { HeadersList, HeadersObject } from './glossary'\nimport { normalizeHeaderName } from './utils/normalizeHeaderName'\nimport { normalizeHeaderValue } from './utils/normalizeHeaderValue'\nimport { isValidHeaderName } from './utils/isValidHeaderName'\nimport { isValidHeaderValue } from './utils/isValidHeaderValue'\n\nexport const NORMALIZED_HEADERS: unique symbol = Symbol('normalizedHeaders')\n\nexport const RAW_HEADER_NAMES: unique symbol = Symbol('rawHeaderNames')\n\nconst HEADER_VALUE_DELIMITER = ', ' as const\n\nexport class Headers {\n  // Normalized header {\"name\":\"a, b\"} storage.\n  private [NORMALIZED_HEADERS]: Record<string, string> = {}\n\n  // Keeps the mapping between the raw header name\n  // and the normalized header name to ease the lookup.\n  private [RAW_HEADER_NAMES]: Map<string, string> = new Map()\n\n  constructor(init?: HeadersInit | HeadersObject | HeadersList) {\n    /**\n     * @note Cannot necessarily check if the `init` is an instance of the\n     * `Headers` because that class may not be defined in Node or jsdom.\n     */\n    if (\n      ['Headers', 'HeadersPolyfill'].includes(init?.constructor.name) ||\n      init instanceof Headers ||\n      (typeof globalThis.Headers !== 'undefined' && init instanceof globalThis.Headers)\n    ) {\n      const initialHeaders = init as Headers\n      initialHeaders.forEach((value, name) => {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(init)) {\n      init.forEach(([name, value]) => {\n        this.append(\n          name,\n          Array.isArray(value) ? value.join(HEADER_VALUE_DELIMITER) : value\n        )\n      })\n    } else if (init) {\n      Object.getOwnPropertyNames(init).forEach((name) => {\n        const value = init[name]\n        this.append(\n          name,\n          Array.isArray(value) ? value.join(HEADER_VALUE_DELIMITER) : value\n        )\n      })\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n\n  *keys(): IterableIterator<string> {\n    for (const [name] of this.entries()) {\n      yield name\n    }\n  }\n\n  *values(): IterableIterator<string> {\n    for (const [, value] of this.entries()) {\n      yield value\n    }\n  }\n\n  *entries(): IterableIterator<[string, string]> {\n    // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n    let sortedKeys = Object.keys(this[NORMALIZED_HEADERS]).sort((a, b) =>\n      a.localeCompare(b)\n    )\n    for (const name of sortedKeys) {\n      if (name === 'set-cookie') {\n        for (const value of this.getSetCookie()) {\n          yield [name, value]\n        }\n      } else {\n        yield [name, this.get(name)]\n      }\n    }\n  }\n\n  /**\n   * Returns a boolean stating whether a `Headers` object contains a certain header.\n   */\n  has(name: string): boolean {\n    if (!isValidHeaderName(name)) {\n      throw new TypeError(`Invalid header name \"${name}\"`)\n    }\n\n    return this[NORMALIZED_HEADERS].hasOwnProperty(normalizeHeaderName(name))\n  }\n\n  /**\n   * Returns a `ByteString` sequence of all the values of a header with a given name.\n   */\n  get(name: string): string | null {\n    if (!isValidHeaderName(name)) {\n      throw TypeError(`Invalid header name \"${name}\"`)\n    }\n\n    return this[NORMALIZED_HEADERS][normalizeHeaderName(name)] ?? null\n  }\n\n  /**\n   * Sets a new value for an existing header inside a `Headers` object, or adds the header if it does not already exist.\n   */\n  set(name: string, value: string): void {\n    if (!isValidHeaderName(name) || !isValidHeaderValue(value)) {\n      return\n    }\n\n    const normalizedName = normalizeHeaderName(name)\n    const normalizedValue = normalizeHeaderValue(value)\n\n    this[NORMALIZED_HEADERS][normalizedName] =\n      normalizeHeaderValue(normalizedValue)\n    this[RAW_HEADER_NAMES].set(normalizedName, name)\n  }\n\n  /**\n   * Appends a new value onto an existing header inside a `Headers` object, or adds the header if it does not already exist.\n   */\n  append(name: string, value: string): void {\n    if (!isValidHeaderName(name) || !isValidHeaderValue(value)) {\n      return\n    }\n\n    const normalizedName = normalizeHeaderName(name)\n    const normalizedValue = normalizeHeaderValue(value)\n\n    let resolvedValue = this.has(normalizedName)\n      ? `${this.get(normalizedName)}, ${normalizedValue}`\n      : normalizedValue\n\n    this.set(name, resolvedValue)\n  }\n\n  /**\n   * Deletes a header from the `Headers` object.\n   */\n  delete(name: string): void {\n    if (!isValidHeaderName(name)) {\n      return\n    }\n\n    if (!this.has(name)) {\n      return\n    }\n\n    const normalizedName = normalizeHeaderName(name)\n    delete this[NORMALIZED_HEADERS][normalizedName]\n    this[RAW_HEADER_NAMES].delete(normalizedName)\n  }\n\n  /**\n   * Traverses the `Headers` object,\n   * calling the given callback for each header.\n   */\n  forEach<ThisArg = this>(\n    callback: (\n      this: ThisArg,\n      value: string,\n      name: string,\n      parent: this\n    ) => void,\n    thisArg?: ThisArg\n  ) {\n    for (const [name, value] of this.entries()) {\n      callback.call(thisArg, value, name, this)\n    }\n  }\n\n  /**\n   * Returns an array containing the values\n   * of all Set-Cookie headers associated\n   * with a response\n   */\n  getSetCookie(): string[] {\n    const setCookieHeader = this.get('set-cookie')\n\n    if (setCookieHeader === null) {\n      return []\n    }\n\n    if (setCookieHeader === '') {\n      return ['']\n    }\n\n    return splitCookiesString(setCookieHeader)\n  }\n}\n","const HEADERS_INVALID_CHARACTERS = /[^a-z0-9\\-#$%&'*+.^_`|~]/i\n\nexport function normalizeHeaderName(name: string): string {\n  if (HEADERS_INVALID_CHARACTERS.test(name) || name.trim() === '') {\n    throw new TypeError('Invalid character in header field name')\n  }\n\n  return name.trim().toLowerCase()\n}\n","const charCodesToRemove = [\n  String.fromCharCode(0x0a),\n  String.fromCharCode(0x0d),\n  String.fromCharCode(0x09),\n  String.fromCharCode(0x20),\n]\n\nconst HEADER_VALUE_REMOVE_REGEXP = new RegExp(\n  `(^[${charCodesToRemove.join('')}]|$[${charCodesToRemove.join('')}])`,\n  'g'\n)\n\n/**\n * Normalize the given header value.\n * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize\n */\nexport function normalizeHeaderValue(value: string): string {\n  const nextValue = value.replace(HEADER_VALUE_REMOVE_REGEXP, '')\n  return nextValue\n}\n","/**\n * Validate the given header name.\n * @see https://fetch.spec.whatwg.org/#header-name\n */\nexport function isValidHeaderName(value: unknown) {\n  if (typeof value !== 'string') {\n    return false\n  }\n\n  if (value.length === 0) {\n    return false\n  }\n\n  for (let i = 0; i < value.length; i++) {\n    const character = value.charCodeAt(i)\n\n    if (character > 0x7f || !isToken(character)) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction isToken(value: string | number): boolean {\n  return ![\n    0x7f,\n    0x20,\n    '(',\n    ')',\n    '<',\n    '>',\n    '@',\n    ',',\n    ';',\n    ':',\n    '\\\\',\n    '\"',\n    '/',\n    '[',\n    ']',\n    '?',\n    '=',\n    '{',\n    '}',\n  ].includes(value)\n}\n","/**\n * Validate the given header value.\n * @see https://fetch.spec.whatwg.org/#header-value\n */\nexport function isValidHeaderValue(value: unknown): boolean {\n  if (typeof value !== 'string') {\n    return false\n  }\n\n  if (value.trim() !== value) {\n    return false\n  }\n\n  for (let i = 0; i < value.length; i++) {\n    const character = value.charCodeAt(i)\n\n    if (\n      // NUL.\n      character === 0x00 ||\n      // HTTP newline bytes.\n      character === 0x0a ||\n      character === 0x0d\n    ) {\n      return false\n    }\n  }\n\n  return true\n}\n","import { RAW_HEADER_NAMES } from './Headers'\n\n/**\n * Returns the object of all raw headers.\n */\nexport function getRawHeaders(headers: Headers) {\n  const rawHeaders: Record<string, string> = {}\n\n  for (const [name, value] of headers.entries()) {\n    rawHeaders[headers[RAW_HEADER_NAMES].get(name)] = value\n  }\n\n  return rawHeaders\n}\n","import { HeadersList } from '../glossary'\n\nexport function headersToList(headers: Headers): HeadersList {\n  const headersList: HeadersList = []\n\n  headers.forEach((value, name) => {\n    const resolvedValue = value.includes(',')\n      ? value.split(',').map((value) => value.trim())\n      : value\n\n    headersList.push([name, resolvedValue])\n  })\n\n  return headersList\n}\n","import { headersToList } from './headersToList'\n\n/**\n * Converts a given `Headers` instance to its string representation.\n */\nexport function headersToString(headers: Headers): string {\n  const list = headersToList(headers)\n  const lines = list.map(([name, value]) => {\n    const values = ([] as string[]).concat(value)\n    return `${name}: ${values.join(', ')}`\n  })\n\n  return lines.join('\\r\\n')\n}\n","import { HeadersObject } from '../glossary'\n\n// List of headers that cannot have multiple values,\n// while potentially having a comma in their single value.\nconst singleValueHeaders = ['user-agent']\n\n/**\n * Converts a given `Headers` instance into a plain object.\n * Respects headers with multiple values.\n */\nexport function headersToObject(headers: Headers): HeadersObject {\n  const headersObject: HeadersObject = {}\n\n  headers.forEach((value, name) => {\n    const isMultiValue =\n      !singleValueHeaders.includes(name.toLowerCase()) && value.includes(',')\n    headersObject[name] = isMultiValue\n      ? value.split(',').map((s) => s.trim())\n      : value\n  })\n\n  return headersObject\n}\n","import { Headers } from '../Headers'\n\n/**\n * Converts a string representation of headers (i.e. from XMLHttpRequest)\n * to a new `Headers` instance.\n */\nexport function stringToHeaders(str: string): Headers {\n  const lines = str.trim().split(/[\\r\\n]+/)\n\n  return lines.reduce((headers, line) => {\n    if (line.trim() === '') {\n      return headers\n    }\n\n    const parts = line.split(': ')\n    const name = parts.shift()\n    const value = parts.join(': ')\n    headers.append(name, value)\n\n    return headers\n  }, new Headers())\n}\n","import { Headers } from '../Headers'\nimport { HeadersList } from '../glossary'\n\nexport function listToHeaders(list: HeadersList): Headers {\n  const headers = new Headers()\n\n  list.forEach(([name, value]) => {\n    const values = ([] as string[]).concat(value)\n\n    values.forEach((value) => {\n      headers.append(name, value)\n    })\n  })\n\n  return headers\n}\n","import { HeadersObject } from '../glossary'\n\n/**\n * Reduces given headers object instnace.\n */\nexport function reduceHeadersObject<R>(\n  headers: HeadersObject,\n  reducer: (headers: R, name: string, value: string | string[]) => R,\n  initialState: R\n): R {\n  return Object.keys(headers).reduce<R>((nextHeaders, name) => {\n    return reducer(nextHeaders, name, headers[name])\n  }, initialState)\n}\n","import { Headers } from '../Headers'\nimport { reduceHeadersObject } from './reduceHeadersObject'\n\n/**\n * Converts a given headers object to a new `Headers` instance.\n */\nexport function objectToHeaders(\n  headersObject: Record<string, string | string[] | undefined>\n): Headers {\n  return reduceHeadersObject(\n    headersObject,\n    (headers, name, value) => {\n      const values = ([] as string[]).concat(value).filter(Boolean)\n\n      values.forEach((value) => {\n        headers.append(name, value)\n      })\n\n      return headers\n    },\n    new Headers()\n  )\n}\n","import { HeadersList, FlatHeadersList } from '../glossary'\n\nexport function flattenHeadersList(list: HeadersList): FlatHeadersList {\n  return list.map(([name, values]) => {\n    return [name, ([] as string[]).concat(values).join(', ')]\n  })\n}\n","import { HeadersObject, FlatHeadersObject } from '../glossary'\nimport { reduceHeadersObject } from './reduceHeadersObject'\n\nexport function flattenHeadersObject(\n  headersObject: HeadersObject\n): FlatHeadersObject {\n  return reduceHeadersObject<FlatHeadersObject>(\n    headersObject,\n    (headers, name, value) => {\n      headers[name] = ([] as string[]).concat(value).join(', ')\n      return headers\n    },\n    {}\n  )\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}