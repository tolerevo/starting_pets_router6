{"ast":null,"code":"import { devUtils } from '../utils/internal/devUtils.mjs';\nimport { isStringEqual } from '../utils/internal/isStringEqual.mjs';\nimport { getStatusCodeColor } from '../utils/logging/getStatusCodeColor.mjs';\nimport { getTimestamp } from '../utils/logging/getTimestamp.mjs';\nimport { serializeRequest } from '../utils/logging/serializeRequest.mjs';\nimport { serializeResponse } from '../utils/logging/serializeResponse.mjs';\nimport { matchRequestUrl } from '../utils/matching/matchRequestUrl.mjs';\nimport { toPublicUrl } from '../utils/request/toPublicUrl.mjs';\nimport { getAllRequestCookies } from '../utils/request/getRequestCookies.mjs';\nimport { cleanUrl, getSearchParams } from '../utils/url/cleanUrl.mjs';\nimport { RequestHandler } from './RequestHandler.mjs';\nvar HttpMethods = /* @__PURE__ */(HttpMethods2 => {\n  HttpMethods2[\"HEAD\"] = \"HEAD\";\n  HttpMethods2[\"GET\"] = \"GET\";\n  HttpMethods2[\"POST\"] = \"POST\";\n  HttpMethods2[\"PUT\"] = \"PUT\";\n  HttpMethods2[\"PATCH\"] = \"PATCH\";\n  HttpMethods2[\"OPTIONS\"] = \"OPTIONS\";\n  HttpMethods2[\"DELETE\"] = \"DELETE\";\n  return HttpMethods2;\n})(HttpMethods || {});\nclass HttpHandler extends RequestHandler {\n  constructor(method, path, resolver, options) {\n    super({\n      info: {\n        header: `${method} ${path}`,\n        path,\n        method\n      },\n      resolver,\n      options\n    });\n    this.checkRedundantQueryParameters();\n  }\n  checkRedundantQueryParameters() {\n    const {\n      method,\n      path\n    } = this.info;\n    if (path instanceof RegExp) {\n      return;\n    }\n    const url = cleanUrl(path);\n    if (url === path) {\n      return;\n    }\n    const searchParams = getSearchParams(path);\n    const queryParams = [];\n    searchParams.forEach((_, paramName) => {\n      queryParams.push(paramName);\n    });\n    devUtils.warn(`Found a redundant usage of query parameters in the request handler URL for \"${method} ${path}\". Please match against a path instead and access query parameters in the response resolver function using \"req.url.searchParams\".`);\n  }\n  async parse(args) {\n    const url = new URL(args.request.url);\n    const match = matchRequestUrl(url, this.info.path, args.resolutionContext?.baseUrl);\n    const cookies = getAllRequestCookies(args.request);\n    return {\n      match,\n      cookies\n    };\n  }\n  predicate(args) {\n    const hasMatchingMethod = this.matchMethod(args.request.method);\n    const hasMatchingUrl = args.parsedResult.match.matches;\n    return hasMatchingMethod && hasMatchingUrl;\n  }\n  matchMethod(actualMethod) {\n    return this.info.method instanceof RegExp ? this.info.method.test(actualMethod) : isStringEqual(this.info.method, actualMethod);\n  }\n  extendResolverArgs(args) {\n    return {\n      params: args.parsedResult.match?.params || {},\n      cookies: args.parsedResult.cookies\n    };\n  }\n  async log(args) {\n    const publicUrl = toPublicUrl(args.request.url);\n    const loggedRequest = await serializeRequest(args.request);\n    const loggedResponse = await serializeResponse(args.response);\n    const statusColor = getStatusCodeColor(loggedResponse.status);\n    console.groupCollapsed(devUtils.formatMessage(`${getTimestamp()} ${args.request.method} ${publicUrl} (%c${loggedResponse.status} ${loggedResponse.statusText}%c)`), `color:${statusColor}`, \"color:inherit\");\n    console.log(\"Request\", loggedRequest);\n    console.log(\"Handler:\", this);\n    console.log(\"Response\", loggedResponse);\n    console.groupEnd();\n  }\n}\nexport { HttpHandler, HttpMethods };","map":{"version":3,"mappings":"AACA,SAASA,gBAAgB;AACzB,SAASC,qBAAqB;AAC9B,SAASC,0BAA0B;AACnC,SAASC,oBAAoB;AAC7B,SAASC,wBAAwB;AACjC,SAASC,yBAAyB;AAClC,SACEC,uBAIK;AACP,SAASC,mBAAmB;AAC5B,SAASC,4BAA4B;AACrC,SAASC,UAAUC,uBAAuB;AAC1C,SACEC,sBAIK;AASA,IAAKC,cAAL,gBAAKA,gBAAL;EACLA,uBAAO;EACPA,sBAAM;EACNA,uBAAO;EACPA,sBAAM;EACNA,wBAAQ;EACRA,0BAAU;EACVA,yBAAS;EAPC;AAAA;AA4BL,MAAMC,oBAAoBF,eAI/B;EACAG,YACEC,QACAC,MACAC,UACAC,SACA;IACA,MAAM;MACJC,MAAM;QACJC,QAAQ,GAAGL,MAAM,IAAIC,IAAI;QACzBA;QACAD;MACF;MACAE;MACAC;IACF,CAAC;IAED,KAAKG,8BAA8B;EACrC;EAEQA,gCAAgC;IACtC,MAAM;MAAEN;MAAQC;IAAK,IAAI,KAAKG;IAE9B,IAAIH,gBAAgBM,QAAQ;MAC1B;IACF;IAEA,MAAMC,MAAMd,SAASO,IAAI;IAGzB,IAAIO,QAAQP,MAAM;MAChB;IACF;IAEA,MAAMQ,eAAed,gBAAgBM,IAAI;IACzC,MAAMS,cAAwB,EAAC;IAE/BD,aAAaE,QAAQ,CAACC,GAAGC,cAAc;MACrCH,YAAYI,KAAKD,SAAS;IAC5B,CAAC;IAED5B,SAAS8B,KACP,+EAA+Ef,MAAM,IAAIC,IAAI,oIAC/F;EACF;EAEA,MAAMe,MAAMC,MAGT;IACD,MAAMT,MAAM,IAAIU,IAAID,KAAKE,QAAQX,GAAG;IACpC,MAAMY,QAAQ7B,gBACZiB,KACA,KAAKJ,KAAKH,MACVgB,KAAKI,mBAAmBC,OAC1B;IACA,MAAMC,UAAU9B,qBAAqBwB,KAAKE,OAAO;IAEjD,OAAO;MACLC;MACAG;IACF;EACF;EAEAC,UAAUP,MAAmE;IAC3E,MAAMQ,oBAAoB,KAAKC,YAAYT,KAAKE,QAAQnB,MAAM;IAC9D,MAAM2B,iBAAiBV,KAAKW,aAAaR,MAAMS;IAC/C,OAAOJ,qBAAqBE;EAC9B;EAEQD,YAAYI,cAA+B;IACjD,OAAO,KAAK1B,KAAKJ,kBAAkBO,SAC/B,KAAKH,KAAKJ,OAAO+B,KAAKD,YAAY,IAClC5C,cAAc,KAAKkB,KAAKJ,QAAQ8B,YAAY;EAClD;EAEUE,mBAAmBf,MAG1B;IACD,OAAO;MACLgB,QAAQhB,KAAKW,aAAaR,OAAOa,UAAU,CAAC;MAC5CV,SAASN,KAAKW,aAAaL;IAC7B;EACF;EAEA,MAAMW,IAAIjB,MAAgD;IACxD,MAAMkB,YAAY3C,YAAYyB,KAAKE,QAAQX,GAAG;IAC9C,MAAM4B,gBAAgB,MAAM/C,iBAAiB4B,KAAKE,OAAO;IACzD,MAAMkB,iBAAiB,MAAM/C,kBAAkB2B,KAAKqB,QAAQ;IAC5D,MAAMC,cAAcpD,mBAAmBkD,eAAeG,MAAM;IAE5DC,QAAQC,eACNzD,SAAS0D,cACP,GAAGvD,aAAa,CAAC,IAAI6B,KAAKE,QAAQnB,MAAM,IAAImC,SAAS,OACnDE,eAAeG,MACjB,IAAIH,eAAeO,UAAU,KAC/B,GACA,SAASL,WAAW,IACpB,eACF;IACAE,QAAQP,IAAI,WAAWE,aAAa;IACpCK,QAAQP,IAAI,YAAY,IAAI;IAC5BO,QAAQP,IAAI,YAAYG,cAAc;IACtCI,QAAQI,SAAS;EACnB;AACF","names":["devUtils","isStringEqual","getStatusCodeColor","getTimestamp","serializeRequest","serializeResponse","matchRequestUrl","toPublicUrl","getAllRequestCookies","cleanUrl","getSearchParams","RequestHandler","HttpMethods","HttpHandler","constructor","method","path","resolver","options","info","header","checkRedundantQueryParameters","RegExp","url","searchParams","queryParams","forEach","_","paramName","push","warn","parse","args","URL","request","match","resolutionContext","baseUrl","cookies","predicate","hasMatchingMethod","matchMethod","hasMatchingUrl","parsedResult","matches","actualMethod","test","extendResolverArgs","params","log","publicUrl","loggedRequest","loggedResponse","response","statusColor","status","console","groupCollapsed","formatMessage","statusText","groupEnd"],"sources":["/Users/ditole/Desktop/projects/pets-store/node_modules/msw/src/core/handlers/HttpHandler.ts"],"sourcesContent":["import { ResponseResolutionContext } from '../utils/executeHandlers'\nimport { devUtils } from '../utils/internal/devUtils'\nimport { isStringEqual } from '../utils/internal/isStringEqual'\nimport { getStatusCodeColor } from '../utils/logging/getStatusCodeColor'\nimport { getTimestamp } from '../utils/logging/getTimestamp'\nimport { serializeRequest } from '../utils/logging/serializeRequest'\nimport { serializeResponse } from '../utils/logging/serializeResponse'\nimport {\n  matchRequestUrl,\n  Match,\n  Path,\n  PathParams,\n} from '../utils/matching/matchRequestUrl'\nimport { toPublicUrl } from '../utils/request/toPublicUrl'\nimport { getAllRequestCookies } from '../utils/request/getRequestCookies'\nimport { cleanUrl, getSearchParams } from '../utils/url/cleanUrl'\nimport {\n  RequestHandler,\n  RequestHandlerDefaultInfo,\n  RequestHandlerOptions,\n  ResponseResolver,\n} from './RequestHandler'\n\ntype HttpHandlerMethod = string | RegExp\n\nexport interface HttpHandlerInfo extends RequestHandlerDefaultInfo {\n  method: HttpHandlerMethod\n  path: Path\n}\n\nexport enum HttpMethods {\n  HEAD = 'HEAD',\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  PATCH = 'PATCH',\n  OPTIONS = 'OPTIONS',\n  DELETE = 'DELETE',\n}\n\nexport type RequestQuery = {\n  [queryName: string]: string\n}\n\nexport type HttpRequestParsedResult = {\n  match: Match\n  cookies: Record<string, string>\n}\n\nexport type HttpRequestResolverExtras<Params extends PathParams> = {\n  params: Params\n  cookies: Record<string, string>\n}\n\n/**\n * Request handler for HTTP requests.\n * Provides request matching based on method and URL.\n */\nexport class HttpHandler extends RequestHandler<\n  HttpHandlerInfo,\n  HttpRequestParsedResult,\n  HttpRequestResolverExtras<any>\n> {\n  constructor(\n    method: HttpHandlerMethod,\n    path: Path,\n    resolver: ResponseResolver<HttpRequestResolverExtras<any>, any, any>,\n    options?: RequestHandlerOptions,\n  ) {\n    super({\n      info: {\n        header: `${method} ${path}`,\n        path,\n        method,\n      },\n      resolver,\n      options,\n    })\n\n    this.checkRedundantQueryParameters()\n  }\n\n  private checkRedundantQueryParameters() {\n    const { method, path } = this.info\n\n    if (path instanceof RegExp) {\n      return\n    }\n\n    const url = cleanUrl(path)\n\n    // Bypass request handler URLs that have no redundant characters.\n    if (url === path) {\n      return\n    }\n\n    const searchParams = getSearchParams(path)\n    const queryParams: string[] = []\n\n    searchParams.forEach((_, paramName) => {\n      queryParams.push(paramName)\n    })\n\n    devUtils.warn(\n      `Found a redundant usage of query parameters in the request handler URL for \"${method} ${path}\". Please match against a path instead and access query parameters in the response resolver function using \"req.url.searchParams\".`,\n    )\n  }\n\n  async parse(args: {\n    request: Request\n    resolutionContext?: ResponseResolutionContext\n  }) {\n    const url = new URL(args.request.url)\n    const match = matchRequestUrl(\n      url,\n      this.info.path,\n      args.resolutionContext?.baseUrl,\n    )\n    const cookies = getAllRequestCookies(args.request)\n\n    return {\n      match,\n      cookies,\n    }\n  }\n\n  predicate(args: { request: Request; parsedResult: HttpRequestParsedResult }) {\n    const hasMatchingMethod = this.matchMethod(args.request.method)\n    const hasMatchingUrl = args.parsedResult.match.matches\n    return hasMatchingMethod && hasMatchingUrl\n  }\n\n  private matchMethod(actualMethod: string): boolean {\n    return this.info.method instanceof RegExp\n      ? this.info.method.test(actualMethod)\n      : isStringEqual(this.info.method, actualMethod)\n  }\n\n  protected extendResolverArgs(args: {\n    request: Request\n    parsedResult: HttpRequestParsedResult\n  }) {\n    return {\n      params: args.parsedResult.match?.params || {},\n      cookies: args.parsedResult.cookies,\n    }\n  }\n\n  async log(args: { request: Request; response: Response }) {\n    const publicUrl = toPublicUrl(args.request.url)\n    const loggedRequest = await serializeRequest(args.request)\n    const loggedResponse = await serializeResponse(args.response)\n    const statusColor = getStatusCodeColor(loggedResponse.status)\n\n    console.groupCollapsed(\n      devUtils.formatMessage(\n        `${getTimestamp()} ${args.request.method} ${publicUrl} (%c${\n          loggedResponse.status\n        } ${loggedResponse.statusText}%c)`,\n      ),\n      `color:${statusColor}`,\n      'color:inherit',\n    )\n    console.log('Request', loggedRequest)\n    console.log('Handler:', this)\n    console.log('Response', loggedResponse)\n    console.groupEnd()\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}