{"ast":null,"code":"import { isNodeProcess } from \"is-node-process\";\nconst SET_TIMEOUT_MAX_ALLOWED_INT = 2147483647;\nconst MIN_SERVER_RESPONSE_TIME = 100;\nconst MAX_SERVER_RESPONSE_TIME = 400;\nconst NODE_SERVER_RESPONSE_TIME = 5;\nfunction getRealisticResponseTime() {\n  if (isNodeProcess()) {\n    return NODE_SERVER_RESPONSE_TIME;\n  }\n  return Math.floor(Math.random() * (MAX_SERVER_RESPONSE_TIME - MIN_SERVER_RESPONSE_TIME) + MIN_SERVER_RESPONSE_TIME);\n}\nasync function delay(durationOrMode) {\n  let delayTime;\n  if (typeof durationOrMode === \"string\") {\n    switch (durationOrMode) {\n      case \"infinite\":\n        {\n          delayTime = SET_TIMEOUT_MAX_ALLOWED_INT;\n          break;\n        }\n      case \"real\":\n        {\n          delayTime = getRealisticResponseTime();\n          break;\n        }\n      default:\n        {\n          throw new Error(`Failed to delay a response: unknown delay mode \"${durationOrMode}\". Please make sure you provide one of the supported modes (\"real\", \"infinite\") or a number.`);\n        }\n    }\n  } else if (typeof durationOrMode === \"undefined\") {\n    delayTime = getRealisticResponseTime();\n  } else {\n    if (durationOrMode > SET_TIMEOUT_MAX_ALLOWED_INT) {\n      throw new Error(`Failed to delay a response: provided delay duration (${durationOrMode}) exceeds the maximum allowed duration for \"setTimeout\" (${SET_TIMEOUT_MAX_ALLOWED_INT}). This will cause the response to be returned immediately. Please use a number within the allowed range to delay the response by exact duration, or consider the \"infinite\" delay mode to delay the response indefinitely.`);\n    }\n    delayTime = durationOrMode;\n  }\n  return new Promise(resolve => setTimeout(resolve, delayTime));\n}\nexport { MAX_SERVER_RESPONSE_TIME, MIN_SERVER_RESPONSE_TIME, NODE_SERVER_RESPONSE_TIME, SET_TIMEOUT_MAX_ALLOWED_INT, delay };","map":{"version":3,"mappings":"AAAA,SAASA,qBAAqB;AAEvB,MAAMC,8BAA8B;AACpC,MAAMC,2BAA2B;AACjC,MAAMC,2BAA2B;AACjC,MAAMC,4BAA4B;AAEzC,SAASC,2BAAmC;EAC1C,IAAIL,cAAc,GAAG;IACnB,OAAOI;EACT;EAEA,OAAOE,KAAKC,MACVD,KAAKE,OAAO,KAAKL,2BAA2BD,4BAC1CA,wBACJ;AACF;AAcA,eAAsBO,MACpBC,gBACe;EACf,IAAIC;EAEJ,IAAI,OAAOD,mBAAmB,UAAU;IACtC,QAAQA;MACN,KAAK;QAAY;UAGfC,YAAYV;UACZ;QACF;MACA,KAAK;QAAQ;UACXU,YAAYN,yBAAyB;UACrC;QACF;MACA;QAAS;UACP,MAAM,IAAIO,MACR,mDAAmDF,cAAc,8FACnE;QACF;IACF;EACF,WAAW,OAAOA,mBAAmB,aAAa;IAEhDC,YAAYN,yBAAyB;EACvC,OAAO;IAGL,IAAIK,iBAAiBT,6BAA6B;MAChD,MAAM,IAAIW,MACR,wDAAwDF,cAAc,4DAA4DT,2BAA2B,6NAC/J;IACF;IAEAU,YAAYD;EACd;EAEA,OAAO,IAAIG,QAASC,WAAYC,WAAWD,SAASH,SAAS,CAAC;AAChE","names":["isNodeProcess","SET_TIMEOUT_MAX_ALLOWED_INT","MIN_SERVER_RESPONSE_TIME","MAX_SERVER_RESPONSE_TIME","NODE_SERVER_RESPONSE_TIME","getRealisticResponseTime","Math","floor","random","delay","durationOrMode","delayTime","Error","Promise","resolve","setTimeout"],"sources":["/Users/ditole/Desktop/projects/pets-store/node_modules/msw/src/core/delay.ts"],"sourcesContent":["import { isNodeProcess } from 'is-node-process'\n\nexport const SET_TIMEOUT_MAX_ALLOWED_INT = 2147483647\nexport const MIN_SERVER_RESPONSE_TIME = 100\nexport const MAX_SERVER_RESPONSE_TIME = 400\nexport const NODE_SERVER_RESPONSE_TIME = 5\n\nfunction getRealisticResponseTime(): number {\n  if (isNodeProcess()) {\n    return NODE_SERVER_RESPONSE_TIME\n  }\n\n  return Math.floor(\n    Math.random() * (MAX_SERVER_RESPONSE_TIME - MIN_SERVER_RESPONSE_TIME) +\n      MIN_SERVER_RESPONSE_TIME,\n  )\n}\n\nexport type DelayMode = 'real' | 'infinite'\n\n/**\n * Delays the response by the given duration (ms).\n *\n * @example\n * await delay() // emulate realistic server response time\n * await delay(1200) // delay response by 1200ms\n * await delay('infinite') // delay response infinitely\n *\n * @see {@link https://mswjs.io/docs/api/delay `delay()` API reference}\n */\nexport async function delay(\n  durationOrMode?: DelayMode | number,\n): Promise<void> {\n  let delayTime: number\n\n  if (typeof durationOrMode === 'string') {\n    switch (durationOrMode) {\n      case 'infinite': {\n        // Using `Infinity` as a delay value executes the response timeout immediately.\n        // Instead, use the maximum allowed integer for `setTimeout`.\n        delayTime = SET_TIMEOUT_MAX_ALLOWED_INT\n        break\n      }\n      case 'real': {\n        delayTime = getRealisticResponseTime()\n        break\n      }\n      default: {\n        throw new Error(\n          `Failed to delay a response: unknown delay mode \"${durationOrMode}\". Please make sure you provide one of the supported modes (\"real\", \"infinite\") or a number.`,\n        )\n      }\n    }\n  } else if (typeof durationOrMode === 'undefined') {\n    // Use random realistic server response time when no explicit delay duration was provided.\n    delayTime = getRealisticResponseTime()\n  } else {\n    // Guard against passing values like `Infinity` or `Number.MAX_VALUE`\n    // as the response delay duration. They don't produce the result you may expect.\n    if (durationOrMode > SET_TIMEOUT_MAX_ALLOWED_INT) {\n      throw new Error(\n        `Failed to delay a response: provided delay duration (${durationOrMode}) exceeds the maximum allowed duration for \"setTimeout\" (${SET_TIMEOUT_MAX_ALLOWED_INT}). This will cause the response to be returned immediately. Please use a number within the allowed range to delay the response by exact duration, or consider the \"infinite\" delay mode to delay the response indefinitely.`,\n      )\n    }\n\n    delayTime = durationOrMode\n  }\n\n  return new Promise((resolve) => setTimeout(resolve, delayTime))\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}