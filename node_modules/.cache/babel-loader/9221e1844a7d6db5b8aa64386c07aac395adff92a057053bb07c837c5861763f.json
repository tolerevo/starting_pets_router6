{"ast":null,"code":"import { match } from \"path-to-regexp\";\nimport { getCleanUrl } from \"@mswjs/interceptors\";\nimport { normalizePath } from './normalizePath.mjs';\nfunction coercePath(path) {\n  return path.replace(/([:a-zA-Z_-]*)(\\*{1,2})+/g, (_, parameterName, wildcard) => {\n    const expression = \"(.*)\";\n    if (!parameterName) {\n      return expression;\n    }\n    return parameterName.startsWith(\":\") ? `${parameterName}${wildcard}` : `${parameterName}${expression}`;\n  }).replace(/([^\\/])(:)(?=\\d+)/, \"$1\\\\$2\").replace(/^([^\\/]+)(:)(?=\\/\\/)/, \"$1\\\\$2\");\n}\nfunction matchRequestUrl(url, path, baseUrl) {\n  const normalizedPath = normalizePath(path, baseUrl);\n  const cleanPath = typeof normalizedPath === \"string\" ? coercePath(normalizedPath) : normalizedPath;\n  const cleanUrl = getCleanUrl(url);\n  const result = match(cleanPath, {\n    decode: decodeURIComponent\n  })(cleanUrl);\n  const params = result && result.params || {};\n  return {\n    matches: result !== false,\n    params\n  };\n}\nexport { coercePath, matchRequestUrl };","map":{"version":3,"mappings":"AAAA,SAASA,aAAa;AACtB,SAASC,mBAAmB;AAC5B,SAASC,qBAAqB;AAgBvB,SAASC,WAAWC,MAAsB;EAC/C,OACEA,KAMGC,QACC,6BACA,CAACC,GAAGC,eAAmCC,aAAqB;IAC1D,MAAMC,aAAa;IAEnB,IAAI,CAACF,eAAe;MAClB,OAAOE;IACT;IAEA,OAAOF,cAAcG,WAAW,GAAG,IAC/B,GAAGH,aAAa,GAAGC,QAAQ,KAC3B,GAAGD,aAAa,GAAGE,UAAU;EACnC,CACF,EAKCJ,QAAQ,qBAAqB,QAAQ,EAMrCA,QAAQ,wBAAwB,QAAQ;AAE/C;AAKO,SAASM,gBAAgBC,KAAUR,MAAYS,SAAyB;EAC7E,MAAMC,iBAAiBZ,cAAcE,MAAMS,OAAO;EAClD,MAAME,YACJ,OAAOD,mBAAmB,WACtBX,WAAWW,cAAc,IACzBA;EAEN,MAAME,WAAWf,YAAYW,GAAG;EAChC,MAAMK,SAASjB,MAAMe,WAAW;IAAEG,QAAQC;EAAmB,CAAC,EAAEH,QAAQ;EACxE,MAAMI,SAAUH,UAAWA,OAAOG,UAA0B,CAAC;EAE7D,OAAO;IACLC,SAASJ,WAAW;IACpBG;EACF;AACF","names":["match","getCleanUrl","normalizePath","coercePath","path","replace","_","parameterName","wildcard","expression","startsWith","matchRequestUrl","url","baseUrl","normalizedPath","cleanPath","cleanUrl","result","decode","decodeURIComponent","params","matches"],"sources":["/Users/ditole/Desktop/projects/pets-store/node_modules/msw/src/core/utils/matching/matchRequestUrl.ts"],"sourcesContent":["import { match } from 'path-to-regexp'\nimport { getCleanUrl } from '@mswjs/interceptors'\nimport { normalizePath } from './normalizePath'\n\nexport type Path = string | RegExp\nexport type PathParams<KeyType extends keyof any = string> = {\n  [ParamName in KeyType]: string | ReadonlyArray<string>\n}\n\nexport interface Match {\n  matches: boolean\n  params?: PathParams\n}\n\n/**\n * Coerce a path supported by MSW into a path\n * supported by \"path-to-regexp\".\n */\nexport function coercePath(path: string): string {\n  return (\n    path\n      /**\n       * Replace wildcards (\"*\") with unnamed capturing groups\n       * because \"path-to-regexp\" doesn't support wildcards.\n       * Ignore path parameter' modifiers (i.e. \":name*\").\n       */\n      .replace(\n        /([:a-zA-Z_-]*)(\\*{1,2})+/g,\n        (_, parameterName: string | undefined, wildcard: string) => {\n          const expression = '(.*)'\n\n          if (!parameterName) {\n            return expression\n          }\n\n          return parameterName.startsWith(':')\n            ? `${parameterName}${wildcard}`\n            : `${parameterName}${expression}`\n        },\n      )\n      /**\n       * Escape the port so that \"path-to-regexp\" can match\n       * absolute URLs including port numbers.\n       */\n      .replace(/([^\\/])(:)(?=\\d+)/, '$1\\\\$2')\n      /**\n       * Escape the protocol so that \"path-to-regexp\" could match\n       * absolute URL.\n       * @see https://github.com/pillarjs/path-to-regexp/issues/259\n       */\n      .replace(/^([^\\/]+)(:)(?=\\/\\/)/, '$1\\\\$2')\n  )\n}\n\n/**\n * Returns the result of matching given request URL against a mask.\n */\nexport function matchRequestUrl(url: URL, path: Path, baseUrl?: string): Match {\n  const normalizedPath = normalizePath(path, baseUrl)\n  const cleanPath =\n    typeof normalizedPath === 'string'\n      ? coercePath(normalizedPath)\n      : normalizedPath\n\n  const cleanUrl = getCleanUrl(url)\n  const result = match(cleanPath, { decode: decodeURIComponent })(cleanUrl)\n  const params = (result && (result.params as PathParams)) || {}\n\n  return {\n    matches: result !== false,\n    params,\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}