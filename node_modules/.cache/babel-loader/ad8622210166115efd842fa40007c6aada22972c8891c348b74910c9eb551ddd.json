{"ast":null,"code":"import { invariant } from \"outvariant\";\nimport { Emitter } from \"strict-event-emitter\";\nimport { devUtils } from './utils/internal/devUtils.mjs';\nimport { pipeEvents } from './utils/internal/pipeEvents.mjs';\nimport { toReadonlyArray } from './utils/internal/toReadonlyArray.mjs';\nimport { Disposable } from './utils/internal/Disposable.mjs';\nclass HandlersController {}\nclass InMemoryHandlersController {\n  constructor(initialHandlers) {\n    this.initialHandlers = initialHandlers;\n    this.handlers = [...initialHandlers];\n  }\n  handlers;\n  prepend(runtimeHandles) {\n    this.handlers.unshift(...runtimeHandles);\n  }\n  reset(nextHandlers) {\n    this.handlers = nextHandlers.length > 0 ? [...nextHandlers] : [...this.initialHandlers];\n  }\n  currentHandlers() {\n    return this.handlers;\n  }\n}\nclass SetupApi extends Disposable {\n  handlersController;\n  emitter;\n  publicEmitter;\n  events;\n  constructor() {\n    super();\n    for (var _len = arguments.length, initialHandlers = new Array(_len), _key = 0; _key < _len; _key++) {\n      initialHandlers[_key] = arguments[_key];\n    }\n    invariant(this.validateHandlers(initialHandlers), devUtils.formatMessage(`Failed to apply given request handlers: invalid input. Did you forget to spread the request handlers Array?`));\n    this.handlersController = new InMemoryHandlersController(initialHandlers);\n    this.emitter = new Emitter();\n    this.publicEmitter = new Emitter();\n    pipeEvents(this.emitter, this.publicEmitter);\n    this.events = this.createLifeCycleEvents();\n    this.subscriptions.push(() => {\n      this.emitter.removeAllListeners();\n      this.publicEmitter.removeAllListeners();\n    });\n  }\n  validateHandlers(handlers) {\n    return handlers.every(handler => !Array.isArray(handler));\n  }\n  use() {\n    for (var _len2 = arguments.length, runtimeHandlers = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      runtimeHandlers[_key2] = arguments[_key2];\n    }\n    invariant(this.validateHandlers(runtimeHandlers), devUtils.formatMessage(`Failed to call \"use()\" with the given request handlers: invalid input. Did you forget to spread the array of request handlers?`));\n    this.handlersController.prepend(runtimeHandlers);\n  }\n  restoreHandlers() {\n    this.handlersController.currentHandlers().forEach(handler => {\n      handler.isUsed = false;\n    });\n  }\n  resetHandlers() {\n    for (var _len3 = arguments.length, nextHandlers = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      nextHandlers[_key3] = arguments[_key3];\n    }\n    this.handlersController.reset(nextHandlers);\n  }\n  listHandlers() {\n    return toReadonlyArray(this.handlersController.currentHandlers());\n  }\n  createLifeCycleEvents() {\n    var _this = this;\n    return {\n      on: function () {\n        return _this.publicEmitter.on(...arguments);\n      },\n      removeListener: function () {\n        return _this.publicEmitter.removeListener(...arguments);\n      },\n      removeAllListeners: function () {\n        return _this.publicEmitter.removeAllListeners(...arguments);\n      }\n    };\n  }\n}\nexport { HandlersController, InMemoryHandlersController, SetupApi };","map":{"version":3,"mappings":"AAAA,SAASA,iBAAiB;AAC1B,SAAmBC,eAAe;AAMlC,SAASC,gBAAgB;AACzB,SAASC,kBAAkB;AAC3B,SAASC,uBAAuB;AAChC,SAASC,kBAAkB;AAEpB,MAAeC,mBAAmB;AAMlC,MAAMC,2BAAyD;EAGpEC,YAAoBC,iBAAwC;IAAxC;IAClB,KAAKC,WAAW,CAAC,GAAGD,eAAe;EACrC;EAJQC;EAMDC,QAAQC,gBAA6C;IAC1D,KAAKF,SAASG,QAAQ,GAAGD,cAAc;EACzC;EAEOE,MAAMC,cAA2C;IACtD,KAAKL,WACHK,aAAaC,SAAS,IAAI,CAAC,GAAGD,YAAY,IAAI,CAAC,GAAG,KAAKN,eAAe;EAC1E;EAEOQ,kBAAyC;IAC9C,OAAO,KAAKP;EACd;AACF;AAKO,MAAeQ,iBAA6Cb,WAAW;EAClEc;EACSC;EACAC;EAEHC;EAEhBd,cAAuD;IACrD,MAAM;IAAA,kCADOC;MAAAA;IAAA;IAGbT,UACE,KAAKuB,iBAAiBd,eAAe,GACrCP,SAASsB,cACP,6GACF,CACF;IAEA,KAAKL,qBAAqB,IAAIZ,2BAA2BE,eAAe;IAExE,KAAKW,UAAU,IAAInB,QAAmB;IACtC,KAAKoB,gBAAgB,IAAIpB,QAAmB;IAC5CE,WAAW,KAAKiB,SAAS,KAAKC,aAAa;IAE3C,KAAKC,SAAS,KAAKG,sBAAsB;IAEzC,KAAKC,cAAcC,KAAK,MAAM;MAC5B,KAAKP,QAAQQ,mBAAmB;MAChC,KAAKP,cAAcO,mBAAmB;IACxC,CAAC;EACH;EAEQL,iBAAiBb,UAAkD;IAEzE,OAAOA,SAASmB,MAAOC,WAAY,CAACC,MAAMC,QAAQF,OAAO,CAAC;EAC5D;EAEOG,MAAqD;IAAA,mCAA9CC;MAAAA;IAAA;IACZlC,UACE,KAAKuB,iBAAiBW,eAAe,GACrChC,SAASsB,cACP,gIACF,CACF;IAEA,KAAKL,mBAAmBR,QAAQuB,eAAe;EACjD;EAEOC,kBAAwB;IAC7B,KAAKhB,mBAAmBF,gBAAgB,EAAEmB,QAASN,WAAY;MAC7DA,QAAQO,SAAS;IACnB,CAAC;EACH;EAEOC,gBAA4D;IAAA,mCAA3CvB;MAAAA;IAAA;IACtB,KAAKI,mBAAmBL,MAAMC,YAAY;EAC5C;EAEOwB,eAEL;IACA,OAAOnC,gBAAgB,KAAKe,mBAAmBF,gBAAgB,CAAC;EAClE;EAEQQ,wBAA0D;IAAA;IAChE,OAAO;MACLe,IAAI,YAAoB;QACtB,OAAQC,MAAKpB,cAAcmB,GAAW,YAAO;MAC/C;MACAE,gBAAgB,YAAoB;QAClC,OAAQD,MAAKpB,cAAcqB,eAAuB,YAAO;MAC3D;MACAd,oBAAoB,YAAoB;QACtC,OAAOa,MAAKpB,cAAcO,mBAAmB,YAAO;MACtD;IACF;EACF;AACF","names":["invariant","Emitter","devUtils","pipeEvents","toReadonlyArray","Disposable","HandlersController","InMemoryHandlersController","constructor","initialHandlers","handlers","prepend","runtimeHandles","unshift","reset","nextHandlers","length","currentHandlers","SetupApi","handlersController","emitter","publicEmitter","events","validateHandlers","formatMessage","createLifeCycleEvents","subscriptions","push","removeAllListeners","every","handler","Array","isArray","use","runtimeHandlers","restoreHandlers","forEach","isUsed","resetHandlers","listHandlers","on","_this","removeListener"],"sources":["/Users/ditole/Desktop/projects/pets-store/node_modules/msw/src/core/SetupApi.ts"],"sourcesContent":["import { invariant } from 'outvariant'\nimport { EventMap, Emitter } from 'strict-event-emitter'\nimport {\n  RequestHandler,\n  RequestHandlerDefaultInfo,\n} from './handlers/RequestHandler'\nimport { LifeCycleEventEmitter } from './sharedOptions'\nimport { devUtils } from './utils/internal/devUtils'\nimport { pipeEvents } from './utils/internal/pipeEvents'\nimport { toReadonlyArray } from './utils/internal/toReadonlyArray'\nimport { Disposable } from './utils/internal/Disposable'\n\nexport abstract class HandlersController {\n  abstract prepend(runtimeHandlers: Array<RequestHandler>): void\n  abstract reset(nextHandles: Array<RequestHandler>): void\n  abstract currentHandlers(): Array<RequestHandler>\n}\n\nexport class InMemoryHandlersController implements HandlersController {\n  private handlers: Array<RequestHandler>\n\n  constructor(private initialHandlers: Array<RequestHandler>) {\n    this.handlers = [...initialHandlers]\n  }\n\n  public prepend(runtimeHandles: Array<RequestHandler>): void {\n    this.handlers.unshift(...runtimeHandles)\n  }\n\n  public reset(nextHandlers: Array<RequestHandler>): void {\n    this.handlers =\n      nextHandlers.length > 0 ? [...nextHandlers] : [...this.initialHandlers]\n  }\n\n  public currentHandlers(): Array<RequestHandler> {\n    return this.handlers\n  }\n}\n\n/**\n * Generic class for the mock API setup.\n */\nexport abstract class SetupApi<EventsMap extends EventMap> extends Disposable {\n  protected handlersController: HandlersController\n  protected readonly emitter: Emitter<EventsMap>\n  protected readonly publicEmitter: Emitter<EventsMap>\n\n  public readonly events: LifeCycleEventEmitter<EventsMap>\n\n  constructor(...initialHandlers: Array<RequestHandler>) {\n    super()\n\n    invariant(\n      this.validateHandlers(initialHandlers),\n      devUtils.formatMessage(\n        `Failed to apply given request handlers: invalid input. Did you forget to spread the request handlers Array?`,\n      ),\n    )\n\n    this.handlersController = new InMemoryHandlersController(initialHandlers)\n\n    this.emitter = new Emitter<EventsMap>()\n    this.publicEmitter = new Emitter<EventsMap>()\n    pipeEvents(this.emitter, this.publicEmitter)\n\n    this.events = this.createLifeCycleEvents()\n\n    this.subscriptions.push(() => {\n      this.emitter.removeAllListeners()\n      this.publicEmitter.removeAllListeners()\n    })\n  }\n\n  private validateHandlers(handlers: ReadonlyArray<RequestHandler>): boolean {\n    // Guard against incorrect call signature of the setup API.\n    return handlers.every((handler) => !Array.isArray(handler))\n  }\n\n  public use(...runtimeHandlers: Array<RequestHandler>): void {\n    invariant(\n      this.validateHandlers(runtimeHandlers),\n      devUtils.formatMessage(\n        `Failed to call \"use()\" with the given request handlers: invalid input. Did you forget to spread the array of request handlers?`,\n      ),\n    )\n\n    this.handlersController.prepend(runtimeHandlers)\n  }\n\n  public restoreHandlers(): void {\n    this.handlersController.currentHandlers().forEach((handler) => {\n      handler.isUsed = false\n    })\n  }\n\n  public resetHandlers(...nextHandlers: Array<RequestHandler>): void {\n    this.handlersController.reset(nextHandlers)\n  }\n\n  public listHandlers(): ReadonlyArray<\n    RequestHandler<RequestHandlerDefaultInfo, any, any>\n  > {\n    return toReadonlyArray(this.handlersController.currentHandlers())\n  }\n\n  private createLifeCycleEvents(): LifeCycleEventEmitter<EventsMap> {\n    return {\n      on: (...args: any[]) => {\n        return (this.publicEmitter.on as any)(...args)\n      },\n      removeListener: (...args: any[]) => {\n        return (this.publicEmitter.removeListener as any)(...args)\n      },\n      removeAllListeners: (...args: any[]) => {\n        return this.publicEmitter.removeAllListeners(...args)\n      },\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}