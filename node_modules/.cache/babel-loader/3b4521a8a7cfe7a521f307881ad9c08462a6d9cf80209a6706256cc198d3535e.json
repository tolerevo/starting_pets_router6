{"ast":null,"code":"import { parse } from \"graphql\";\nimport { toPublicUrl } from '../request/toPublicUrl.mjs';\nimport { devUtils } from './devUtils.mjs';\nimport { jsonParse } from './jsonParse.mjs';\nimport { parseMultipartData } from './parseMultipartData.mjs';\nfunction parseDocumentNode(node) {\n  const operationDef = node.definitions.find(definition => {\n    return definition.kind === \"OperationDefinition\";\n  });\n  return {\n    operationType: operationDef?.operation,\n    operationName: operationDef?.name?.value\n  };\n}\nfunction parseQuery(query) {\n  try {\n    const ast = parse(query);\n    return parseDocumentNode(ast);\n  } catch (error) {\n    return error;\n  }\n}\nfunction extractMultipartVariables(variables, map, files) {\n  const operations = {\n    variables\n  };\n  for (const [key, pathArray] of Object.entries(map)) {\n    if (!(key in files)) {\n      throw new Error(`Given files do not have a key '${key}' .`);\n    }\n    for (const dotPath of pathArray) {\n      const [lastPath, ...reversedPaths] = dotPath.split(\".\").reverse();\n      const paths = reversedPaths.reverse();\n      let target = operations;\n      for (const path of paths) {\n        if (!(path in target)) {\n          throw new Error(`Property '${paths}' is not in operations.`);\n        }\n        target = target[path];\n      }\n      target[lastPath] = files[key];\n    }\n  }\n  return operations.variables;\n}\nasync function getGraphQLInput(request) {\n  switch (request.method) {\n    case \"GET\":\n      {\n        const url = new URL(request.url);\n        const query = url.searchParams.get(\"query\");\n        const variables = url.searchParams.get(\"variables\") || \"\";\n        return {\n          query,\n          variables: jsonParse(variables)\n        };\n      }\n    case \"POST\":\n      {\n        const requestClone = request.clone();\n        if (request.headers.get(\"content-type\")?.includes(\"multipart/form-data\")) {\n          const responseJson = parseMultipartData(await requestClone.text(), request.headers);\n          if (!responseJson) {\n            return null;\n          }\n          const {\n            operations,\n            map,\n            ...files\n          } = responseJson;\n          const parsedOperations = jsonParse(operations) || {};\n          if (!parsedOperations.query) {\n            return null;\n          }\n          const parsedMap = jsonParse(map || \"\") || {};\n          const variables = parsedOperations.variables ? extractMultipartVariables(parsedOperations.variables, parsedMap, files) : {};\n          return {\n            query: parsedOperations.query,\n            variables\n          };\n        }\n        const requestJson = await requestClone.json().catch(() => null);\n        if (requestJson?.query) {\n          const {\n            query,\n            variables\n          } = requestJson;\n          return {\n            query,\n            variables\n          };\n        }\n      }\n    default:\n      return null;\n  }\n}\nasync function parseGraphQLRequest(request) {\n  const input = await getGraphQLInput(request);\n  if (!input || !input.query) {\n    return;\n  }\n  const {\n    query,\n    variables\n  } = input;\n  const parsedResult = parseQuery(query);\n  if (parsedResult instanceof Error) {\n    const requestPublicUrl = toPublicUrl(request.url);\n    throw new Error(devUtils.formatMessage('Failed to intercept a GraphQL request to \"%s %s\": cannot parse query. See the error message from the parser below.\\n\\n%s', request.method, requestPublicUrl, parsedResult.message));\n  }\n  return {\n    query: input.query,\n    operationType: parsedResult.operationType,\n    operationName: parsedResult.operationName,\n    variables\n  };\n}\nexport { parseDocumentNode, parseGraphQLRequest };","map":{"version":3,"mappings":"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","names":["parse","toPublicUrl","devUtils","jsonParse","parseMultipartData","parseDocumentNode","node","operationDef","definitions","find","definition","kind","operationType","operation","operationName","name","value","parseQuery","query","ast","error","extractMultipartVariables","variables","map","files","operations","key","pathArray","Object","entries","Error","dotPath","lastPath","reversedPaths","split","reverse","paths","target","path","getGraphQLInput","request","method","url","URL","searchParams","get","requestClone","clone","headers","includes","responseJson","text","parsedOperations","parsedMap","requestJson","json","catch","parseGraphQLRequest","input","parsedResult","requestPublicUrl","formatMessage","message"],"sources":["/Users/ditole/Desktop/projects/pets-store/node_modules/msw/src/core/utils/internal/parseGraphQLRequest.ts"],"sourcesContent":["import type {\n  DocumentNode,\n  OperationDefinitionNode,\n  OperationTypeNode,\n} from 'graphql'\nimport { parse } from 'graphql'\nimport type { GraphQLVariables } from '../../handlers/GraphQLHandler'\nimport { toPublicUrl } from '../request/toPublicUrl'\nimport { devUtils } from './devUtils'\nimport { jsonParse } from './jsonParse'\nimport { parseMultipartData } from './parseMultipartData'\n\ninterface GraphQLInput {\n  query: string | null\n  variables?: GraphQLVariables\n}\n\nexport interface ParsedGraphQLQuery {\n  operationType: OperationTypeNode\n  operationName?: string\n}\n\nexport type ParsedGraphQLRequest<\n  VariablesType extends GraphQLVariables = GraphQLVariables,\n> =\n  | (ParsedGraphQLQuery & {\n      query: string\n      variables?: VariablesType\n    })\n  | undefined\n\nexport function parseDocumentNode(node: DocumentNode): ParsedGraphQLQuery {\n  const operationDef = node.definitions.find((definition) => {\n    return definition.kind === 'OperationDefinition'\n  }) as OperationDefinitionNode\n\n  return {\n    operationType: operationDef?.operation,\n    operationName: operationDef?.name?.value,\n  }\n}\n\nfunction parseQuery(query: string): ParsedGraphQLQuery | Error {\n  try {\n    const ast = parse(query)\n    return parseDocumentNode(ast)\n  } catch (error) {\n    return error as Error\n  }\n}\n\nexport type GraphQLParsedOperationsMap = Record<string, string[]>\nexport type GraphQLMultipartRequestBody = {\n  operations: string\n  map?: string\n} & {\n  [fileName: string]: File\n}\n\nfunction extractMultipartVariables<VariablesType extends GraphQLVariables>(\n  variables: VariablesType,\n  map: GraphQLParsedOperationsMap,\n  files: Record<string, File>,\n) {\n  const operations = { variables }\n\n  for (const [key, pathArray] of Object.entries(map)) {\n    if (!(key in files)) {\n      throw new Error(`Given files do not have a key '${key}' .`)\n    }\n\n    for (const dotPath of pathArray) {\n      const [lastPath, ...reversedPaths] = dotPath.split('.').reverse()\n      const paths = reversedPaths.reverse()\n      let target: Record<string, any> = operations\n\n      for (const path of paths) {\n        if (!(path in target)) {\n          throw new Error(`Property '${paths}' is not in operations.`)\n        }\n\n        target = target[path]\n      }\n\n      target[lastPath] = files[key]\n    }\n  }\n\n  return operations.variables\n}\n\nasync function getGraphQLInput(request: Request): Promise<GraphQLInput | null> {\n  switch (request.method) {\n    case 'GET': {\n      const url = new URL(request.url)\n      const query = url.searchParams.get('query')\n      const variables = url.searchParams.get('variables') || ''\n\n      return {\n        query,\n        variables: jsonParse(variables),\n      }\n    }\n\n    case 'POST': {\n      // Clone the request so we could read its body without locking\n      // the body stream to the downward consumers.\n      const requestClone = request.clone()\n\n      // Handle multipart body GraphQL operations.\n      if (\n        request.headers.get('content-type')?.includes('multipart/form-data')\n      ) {\n        const responseJson = parseMultipartData<GraphQLMultipartRequestBody>(\n          await requestClone.text(),\n          request.headers,\n        )\n\n        if (!responseJson) {\n          return null\n        }\n\n        const { operations, map, ...files } = responseJson\n        const parsedOperations =\n          jsonParse<{ query?: string; variables?: GraphQLVariables }>(\n            operations,\n          ) || {}\n\n        if (!parsedOperations.query) {\n          return null\n        }\n\n        const parsedMap = jsonParse<GraphQLParsedOperationsMap>(map || '') || {}\n        const variables = parsedOperations.variables\n          ? extractMultipartVariables(\n              parsedOperations.variables,\n              parsedMap,\n              files,\n            )\n          : {}\n\n        return {\n          query: parsedOperations.query,\n          variables,\n        }\n      }\n\n      // Handle plain POST GraphQL operations.\n      const requestJson: {\n        query: string\n        variables?: GraphQLVariables\n        operations?: any /** @todo Annotate this */\n      } = await requestClone.json().catch(() => null)\n\n      if (requestJson?.query) {\n        const { query, variables } = requestJson\n\n        return {\n          query,\n          variables,\n        }\n      }\n    }\n\n    default:\n      return null\n  }\n}\n\n/**\n * Determines if a given request can be considered a GraphQL request.\n * Does not parse the query and does not guarantee its validity.\n */\nexport async function parseGraphQLRequest(\n  request: Request,\n): Promise<ParsedGraphQLRequest> {\n  const input = await getGraphQLInput(request)\n\n  if (!input || !input.query) {\n    return\n  }\n\n  const { query, variables } = input\n  const parsedResult = parseQuery(query)\n\n  if (parsedResult instanceof Error) {\n    const requestPublicUrl = toPublicUrl(request.url)\n\n    throw new Error(\n      devUtils.formatMessage(\n        'Failed to intercept a GraphQL request to \"%s %s\": cannot parse query. See the error message from the parser below.\\n\\n%s',\n        request.method,\n        requestPublicUrl,\n        parsedResult.message,\n      ),\n    )\n  }\n\n  return {\n    query: input.query,\n    operationType: parsedResult.operationType,\n    operationName: parsedResult.operationName,\n    variables,\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}